{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1E_sUtO_oNaQ2NHblNmo6MTpnp09h4Qsf","timestamp":1748864841177},{"file_id":"1S8wPY11tMObAjUASNQyVJYJuBFQ5e7Qv","timestamp":1688356255913},{"file_id":"11n0i-MezlCnVIRHY4UsPDC1Wiv-4Wso9","timestamp":1688353661033},{"file_id":"1XvUr4thqwMBmrW-5_ZNS-lXFFOYLUS2f","timestamp":1682611812659}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## **2 кейс**\n","\n","**Трек задач**"],"metadata":{"id":"XUqCUBW5fUST"}},{"cell_type":"markdown","source":["**Задача**\n","\n","Мы - быстро развивающийся проект, и наши задачи, а точнее задачи нашей команды, растут порой не по дням, и даже не по часам, а буквально каждую минуту. Множество проектов, в каждом проекте множество задач и подзадач. И все становится совсем плохо, когда нет в этих задачах согласованности. И получается как в басне - \"Из кожи лезут вон, а возу всё нет ходу!\".\n","\n","Поэтому, решили мы, что не обойтись нам, без условного \"таск-трекера\". Но опять же, он должен быть супер универсальным, и легко модифицируем при появлении нового проекта, даже если этот проект совершенно новой тематики.\n","\n","Предлагаем вам создать систему эффективного управления задачами и их анализа. Чтобы в любой момент мы могли видеть чем занята команда, выдать статистику по ходу выполнения проектов или даже какие-угодно отчеты.\n","\n","**Техническое задание:**\n","\n","Важно будет определить два класса - Task и Project.\n","\n","Каждая задача (Task) должна иметь следующие атрибуты:\n","\n","Идентификатор (task_id) - уникальный номер задачи\n","Название (name) - название задачи\n","Описание (description) - описание задачи\n","Статус (status) - текущий статус задачи (например, \"выполняется\", \"завершена\", \"ожидание\" и т.д.)\n","Длительность (duration) - ожидаемая длительность задачи\n","\n","**Класс Project** будет содержать список задач и должен иметь следующие методы:\n","\n","Метод для добавления задачи в проект (add_task)\n","Метод для удаления задачи из проекта по ее идентификатору (remove_task)\n","Метод для получения всех задач в проекте (get_all_tasks)\n","Итератор для перебора задач в проекте (\\__iter__\\)\n","\n","Далее, **класс Analysis**, который будет предоставлять методы для анализа задач в проекте. Класс должен иметь следующие статические методы:\n","\n","Метод для подсчета общего количества задач в проекте (count_tasks(project))\n","Метод для подсчета количества задач в определенном статусе (count_tasks_by_status(project, status))\n","Метод для поиска задачи с самым длительным временем выполнения (find_longest_task(project))\n","\n","И последний **класс - EnhancedAnalysis**, который будет наследоваться от класса Analysis и предоставлять дополнительный метод для расширенного анализа задач.\n","Метод для поиска задач, содержащих определенные ключевые слова в названии или описании (find_tasks_with_keywords(project, keywords)). Где keywords это слова, которые мы ищем либо в имени, либо в описании."],"metadata":{"id":"g4oAg09xW3YZ"}},{"cell_type":"markdown","source":["### **Решения**"],"metadata":{"id":"CxmnD3GvffQ4"}},{"cell_type":"markdown","source":["#### **Задача 1**\n","\n","Для начала определите классы `Task` и `Project`."],"metadata":{"id":"5bdLXu2ksLB7"}},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"qUL4LtIUnJge"}},{"cell_type":"code","source":["class Task:\n","  def __init__(self, task_id, name, description, status, duration):\n","    self.task_id = task_id\n","    self.name = name\n","    self.description = description\n","    self.status = status\n","\n","  def get_task_id(self):\n","    return self.task_id\n","\n","  def get_name(self):\n","    return self.name\n","\n","  def get_description(self):\n","    return self.description\n","\n","  def get_status(self):\n","    return self.status\n","\n","  def get_duration(self):\n","    return self.duration\n","\n","class Project:\n","  tasks_list = []\n","  def __init__(self):\n","    ...\n","\n","  def add_task(self, task):\n","    self.tasks_list.append(task)\n","\n","  def remove_task(self, task_id):\n","    for task in self.tasks_list:\n","      if task.task_id == task_id:\n","        self.tasks_list.remove(task)\n","\n","  def get_tasks_list(self):\n","    return self.tasks_list\n","\n","  def __iter__(self):\n","    return iter(self.tasks_list)\n","\n","\n"],"metadata":{"id":"Ia39hhmZbNRW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title ✏️ Проверка: чтобы проверить свое решение запустите код в этой ячейке\n","task1 = Task(1, \"Задача 1\", \"Описание\", \"Выполняется\", 14)\n","task2 = Task(2, \"Задача 2\", \"Описание\", \"Выполняется\", 8)\n","task3 = Task(3, \"Задача 3\", \"Описание\", \"Завершена\", 3)\n","task4 = Task(4, \"Задача 4\", \"Описание: срочно\", \"Выполняется\", 7)\n","\n","project = Project()\n","project.add_task(task1)\n","project.add_task(task2)\n","project.add_task(task3)\n","project.add_task(task4)\n","\n","res = []\n","for task in project:\n","  name = task.get_name()\n","  description = task.get_description()\n","  status = task.get_status()\n","  res.append((name, description, status))\n","\n","try:\n","    assert res == [('Задача 1', 'Описание', 'Выполняется'),\n","                   ('Задача 2', 'Описание', 'Выполняется'),\n","                   ('Задача 3', 'Описание', 'Завершена'),\n","                   ('Задача 4', 'Описание: срочно', 'Выполняется')]\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"id":"LkqzVw9skKEC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748865674975,"user_tz":-240,"elapsed":12,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"e96f1726-debe-4bad-fa33-50f1173ce6a5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]},{"cell_type":"markdown","source":["#### **Задача 2**\n","\n","Определите класс `Analysis`."],"metadata":{"id":"QLNMvvhXoIdV"}},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"LThhpSINoMHN"}},{"cell_type":"code","source":["class Analysis:\n","  def __init__(self):\n","    ...\n","\n","  def count_tasks(project):\n","    return len(project.get_tasks_list())\n","\n","  def count_tasks_by_status(project, status):\n","    count = 0\n","    for task in project.get_tasks_list():\n","      if task.get_status() == status:\n","        count += 1\n","    return count\n","\n","  def find_longest_task(project):\n","    longest_task = None\n","    for task in project.get_tasks_list():\n","      if longest_task is None or task.get_duration() > longest_task.get_duration():\n","        longest_task = task\n","        return longest_task\n"],"metadata":{"id":"9s8JBMlboJuf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title ✏️ Проверка: чтобы проверить свое решение запустите код в этой ячейке\n","res2 = Analysis.count_tasks(project)\n","res3 = Analysis.count_tasks_by_status(project, \"Выполняется\")\n","res4 = Analysis.find_longest_task(project).get_name()\n","\n","try:\n","    assert res2 == 4\n","    assert res3 == 3\n","    assert res4 == 'Задача 1'\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a36bM9j9tD7l","executionInfo":{"status":"ok","timestamp":1748865807390,"user_tz":-240,"elapsed":9,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"16fee291-ba98-48e4-903d-96d25aa49898","cellView":"form"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]},{"cell_type":"markdown","source":["#### **Задача 3**\n","\n","Напишите `EnhancedAnalysis`"],"metadata":{"id":"AwB-HtPLtjyl"}},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"GOTB--hmt2xw"}},{"cell_type":"code","source":["class EnhancedAnalysis(Analysis):\n","  def __init__(self):\n","    ...\n","\n","  def find_tasks_with_keywords(project, keywords):\n","    tasks_with_keywords = []\n","    for task in project.get_tasks_list():\n","      for keyword in keywords:\n","        if keyword in task.get_description():\n","          tasks_with_keywords.append(task)\n","          break\n","        elif keyword in task.get_name():\n","          tasks_with_keywords.append(task)\n","          break\n","    return tasks_with_keywords\n"],"metadata":{"id":"fz7nRb_ntKMv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title ✏️ Проверка: чтобы проверить свое решение запустите код в этой ячейке\n","keywords = [\"срочно\"]\n","found_tasks = EnhancedAnalysis.find_tasks_with_keywords(project, keywords)\n","res5 = []\n","for task in found_tasks:\n","  res5.append(task.get_name())\n","\n","try:\n","    assert res5 == ['Задача 4']\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KzV-hUKcvxb2","executionInfo":{"status":"ok","timestamp":1748865894703,"user_tz":-240,"elapsed":15,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"4e182fbf-7151-4476-9c72-c07c5e2b39df"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]}]}