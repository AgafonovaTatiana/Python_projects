{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1kUJj7MqcpmTXV4Az12LNreR49p7oyiOH","timestamp":1748001976521},{"file_id":"11n0i-MezlCnVIRHY4UsPDC1Wiv-4Wso9","timestamp":1685710380256},{"file_id":"1XvUr4thqwMBmrW-5_ZNS-lXFFOYLUS2f","timestamp":1682611812659}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## **2 кейс**\n","\n","**Выгрузка активности с ItResume**"],"metadata":{"id":"XUqCUBW5fUST"}},{"cell_type":"markdown","source":["**Задача**\n","\n","У нас есть выгрузка данных:\n","\n","Поле created_at - во сколько зафиксировано соответствующее действие\n","user_id - идентификатор пользователя\n","problem_id - идентификатор задачи\n","is_correct - маркер успешного (1) или неуспешного (0) решения задачи. В случаях, когда пользователь отправляет код на run поле is_correct - пустое\n","type - тип события. Пользователь либо нажал \"Выполнить\" (run), либо \"Проверить\" (submit)\n","\n","Какие мы сегодня ставим задачи\n","\n","В первую очередь нам нужно понять, насколько подходит уровень наших задач нашим пользователям. Для этого мы хотим посмотреть сколько в среднем проходит времени от первой попытки решить, до первого правильного решения одной задачи у одного пользователя. Если это время окажется слишком маленьким - нам придется нанимать больше авторов, и опытных; если время окажется достаточно большим - вероятнее всего стоит подумать о добавлении задач попроще.\n","\n","Напишите код, который получал бы csv - файл, приведенный выше и вычислял бы среднее время, которое тратится пользователями на полное, успешное решение одной задачи. Причем, есть некоторые пользователи, которые способны с первого раза решить задачу - таких пользователей считать не нужно, будем считать их гениальными, но \"выбросами\".\n","\n","Что нам еще интересно в этой выгрузке - сколько времени в день в среднем проводит пользователь на платформе. А также, сколько в среднем решается задач за один активный сеанс.\n","\n","Примечание: среднее время за день считаем без учета долгих перерывов, а вот задачи считаем только за активные непрерывные сеансы. Активным непрерывным сеансом считаем период, когда между любой активностью пользователя разница менее или равна часу, не более!\n","\n","И последнее, что нам будет интересно в этой выгрузке, но самое полезное для наших маркетологов - в какое время дня у нас наиболее количество пользователей решают задачи. Давайте возьмем условные часовые периоды, например с 12 до 13, с 13 до 14, и выясним в какое время активность на платформе самая высокая."],"metadata":{"id":"oV8wcckOZlHn"}},{"cell_type":"markdown","source":["**Важно**\n","\n","Перед началом решения выполните следующую ячейку, чтобы загрузить необходимый для работы файл."],"metadata":{"id":"OcK9kF9mfZIt"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"KtNBw8nOfPsB","executionInfo":{"status":"ok","timestamp":1748328929976,"user_tz":-240,"elapsed":572,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"77e543ed-7b51-4e1e-d766-344867b4f45a","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["--2025-05-27 06:55:29--  https://gist.github.com/Vs8th/a7a7f00e6cdef1b3fe87e4d61ca56e5f/raw/codesubmit.csv\n","Resolving gist.github.com (gist.github.com)... 140.82.114.4\n","Connecting to gist.github.com (gist.github.com)|140.82.114.4|:443... connected.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: https://gist.githubusercontent.com/Vs8th/a7a7f00e6cdef1b3fe87e4d61ca56e5f/raw/codesubmit.csv [following]\n","--2025-05-27 06:55:29--  https://gist.githubusercontent.com/Vs8th/a7a7f00e6cdef1b3fe87e4d61ca56e5f/raw/codesubmit.csv\n","Resolving gist.githubusercontent.com (gist.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to gist.githubusercontent.com (gist.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 215378 (210K) [text/plain]\n","Saving to: ‘codesubmit.csv’\n","\n","codesubmit.csv      100%[===================>] 210.33K  --.-KB/s    in 0.04s   \n","\n","2025-05-27 06:55:29 (5.87 MB/s) - ‘codesubmit.csv’ saved [215378/215378]\n","\n"]}],"source":["!wget https://gist.github.com/Vs8th/a7a7f00e6cdef1b3fe87e4d61ca56e5f/raw/codesubmit.csv"]},{"cell_type":"markdown","source":["Чтобы посмотреть как он выглядит выполните следующую ячейку."],"metadata":{"id":"JIwIK2E5fcyA"}},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_csv('codesubmit.csv', sep = ';')\n","df"],"metadata":{"id":"6f84pObFfbGE","colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"status":"ok","timestamp":1748328939713,"user_tz":-240,"elapsed":2144,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"3b53b862-65fa-47e4-9bcd-2cf497b46875"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                      created_at  user_id  problem_id  is_correct    type\n","0     2023-04-30 13:47:14.344471        7         870         1.0  submit\n","1     2023-04-30 13:46:15.949925        7         870         0.0  submit\n","2     2023-04-30 16:13:26.005286      173          21         1.0  submit\n","3     2023-04-30 16:13:06.739782      173          21         NaN     run\n","4     2023-04-30 15:52:00.195532      173          25         1.0  submit\n","...                          ...      ...         ...         ...     ...\n","4994  2023-04-30 21:52:00.269123    13493         435         NaN     run\n","4995  2023-04-30 21:51:01.094234    13493         435         1.0  submit\n","4996  2023-04-30 21:50:52.059690    13493         435         NaN     run\n","4997  2023-04-30 21:42:24.323689    13493        1086         NaN     run\n","4998  2023-04-30 21:36:13.783309    13493        1086         NaN     run\n","\n","[4999 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-75b4f30a-a209-45a1-b460-d07081eeca38\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>created_at</th>\n","      <th>user_id</th>\n","      <th>problem_id</th>\n","      <th>is_correct</th>\n","      <th>type</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2023-04-30 13:47:14.344471</td>\n","      <td>7</td>\n","      <td>870</td>\n","      <td>1.0</td>\n","      <td>submit</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2023-04-30 13:46:15.949925</td>\n","      <td>7</td>\n","      <td>870</td>\n","      <td>0.0</td>\n","      <td>submit</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2023-04-30 16:13:26.005286</td>\n","      <td>173</td>\n","      <td>21</td>\n","      <td>1.0</td>\n","      <td>submit</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2023-04-30 16:13:06.739782</td>\n","      <td>173</td>\n","      <td>21</td>\n","      <td>NaN</td>\n","      <td>run</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2023-04-30 15:52:00.195532</td>\n","      <td>173</td>\n","      <td>25</td>\n","      <td>1.0</td>\n","      <td>submit</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4994</th>\n","      <td>2023-04-30 21:52:00.269123</td>\n","      <td>13493</td>\n","      <td>435</td>\n","      <td>NaN</td>\n","      <td>run</td>\n","    </tr>\n","    <tr>\n","      <th>4995</th>\n","      <td>2023-04-30 21:51:01.094234</td>\n","      <td>13493</td>\n","      <td>435</td>\n","      <td>1.0</td>\n","      <td>submit</td>\n","    </tr>\n","    <tr>\n","      <th>4996</th>\n","      <td>2023-04-30 21:50:52.059690</td>\n","      <td>13493</td>\n","      <td>435</td>\n","      <td>NaN</td>\n","      <td>run</td>\n","    </tr>\n","    <tr>\n","      <th>4997</th>\n","      <td>2023-04-30 21:42:24.323689</td>\n","      <td>13493</td>\n","      <td>1086</td>\n","      <td>NaN</td>\n","      <td>run</td>\n","    </tr>\n","    <tr>\n","      <th>4998</th>\n","      <td>2023-04-30 21:36:13.783309</td>\n","      <td>13493</td>\n","      <td>1086</td>\n","      <td>NaN</td>\n","      <td>run</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4999 rows × 5 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-75b4f30a-a209-45a1-b460-d07081eeca38')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-75b4f30a-a209-45a1-b460-d07081eeca38 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-75b4f30a-a209-45a1-b460-d07081eeca38');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-6a4af39c-e124-4b13-8de4-eb1c44d119d4\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6a4af39c-e124-4b13-8de4-eb1c44d119d4')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-6a4af39c-e124-4b13-8de4-eb1c44d119d4 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_62ec495b-2eb8-452f-aea8-0965dce0b04c\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_62ec495b-2eb8-452f-aea8-0965dce0b04c button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 4999,\n  \"fields\": [\n    {\n      \"column\": \"created_at\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 4999,\n        \"samples\": [\n          \"2023-04-30 13:22:19.979007\",\n          \"2023-04-30 19:35:41.481381\",\n          \"2023-04-30 14:08:32.611368\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3921,\n        \"min\": 7,\n        \"max\": 13493,\n        \"num_unique_values\": 193,\n        \"samples\": [\n          5100,\n          12195,\n          7765\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"problem_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 433,\n        \"min\": 3,\n        \"max\": 1237,\n        \"num_unique_values\": 334,\n        \"samples\": [\n          166,\n          214,\n          876\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_correct\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.47479310070531827,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"run\",\n          \"submit\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","source":["### **Решения**"],"metadata":{"id":"CxmnD3GvffQ4"}},{"cell_type":"markdown","source":["#### **Задача 1**\n","\n","Ваша задача - выяснить сколько в среднем тратится времени на решение задачи.\n","\n","**Примечание**: для правильного подсчета - рассчитайте сначала среднее время решения по каждой задаче в отдельности, и только затем находите общее среднее время решения задач.\n","\n","Результат - число типа `float`, округлите до 2 знаков после запятой и запишите в переменную `res`.\n"],"metadata":{"id":"5bdLXu2ksLB7"}},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"qUL4LtIUnJge"}},{"cell_type":"code","source":["# сколько в среднем проходит времени от первой попытки решить, до первого правильного решения одной задачи у одного пользователя.\n","# есть некоторые пользователи, которые способны с первого раза решить задачу - таких пользователей считать не нужно\n","# время решения - наиболее ранний сабмит + iscorrect = 1 минус сабмит + iscorrect = 0 или run\n"],"metadata":{"id":"kMFhaHJSjZg_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# Ваше решение здесь\n","import csv\n","from collections import defaultdict\n","from datetime import datetime\n","\n","start = defaultdict(lambda: defaultdict(datetime))\n","success = defaultdict(lambda: defaultdict(datetime))\n","data = []\n","\n","with open('codesubmit.csv', newline='') as csvfile:\n","    reader = csv.DictReader(csvfile, delimiter=';')\n","    for row in reader:\n","      data.append(row)\n","\n","for r in data:\n","  problem_id = r['problem_id']\n","  user_id = r['user_id']\n","  created_at = datetime.strptime(r['created_at'], '%Y-%m-%d %H:%M:%S.%f')\n","  is_correct = r['is_correct']\n","  if user_id not in start[problem_id]:\n","    start[problem_id][user_id] = created_at\n","  else:\n","    start[problem_id][user_id] = min(start[problem_id][user_id], created_at)\n","\n","  if is_correct == '1':\n","    if user_id not in success[problem_id]:\n","      success[problem_id][user_id] = created_at\n","    else:\n","      success[problem_id][user_id] = min(success[problem_id][user_id], created_at)\n","\n","time_per_problem = []\n","\n","for problem_id, users_data in start.items():\n","    times_for_this_problem = []\n","    for user_id, start_time in users_data.items():\n","        if user_id in success[problem_id] and success[problem_id][user_id] != start_time:\n","            time_taken = success[problem_id][user_id] - start_time\n","            times_for_this_problem.append(time_taken.total_seconds())\n","\n","    if times_for_this_problem:\n","      average_time_for_problem = sum(times_for_this_problem) / len(times_for_this_problem)\n","      time_per_problem.append(average_time_for_problem)\n","\n","if time_per_problem:\n","    res = sum(time_per_problem) / len(time_per_problem)\n","    res = round(res, 2)\n","else:\n","    res = 0.0\n","\n","print(res)"],"metadata":{"id":"Ia39hhmZbNRW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748337569742,"user_tz":-240,"elapsed":79,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"ee45880c-bbc7-4312-9c15-99b862301021"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["611.86\n"]}]},{"cell_type":"markdown","source":["✏️ ✏️ ✏️\n","\n","**Проверка**\n","\n","Чтобы проверить свое решение, запустите код в следующих ячейках"],"metadata":{"id":"54Tvpn9OkDwV"}},{"cell_type":"code","source":["try:\n","    assert res == 611.86\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"id":"LkqzVw9skKEC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748337581942,"user_tz":-240,"elapsed":41,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"b22c1157-dc6f-4254-9e57-7255f7cea6af"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]},{"cell_type":"markdown","source":["#### **Задача 2**\n","\n","Ваша задача - выяснить сколько часов в среднем проводит юзер в день на платформе. Перерывы в активности за день - не учитываем.\n","\n","Результат - число типа `float`, округлите до 2 знаков после запятой и запишите в переменную `res2`."],"metadata":{"id":"QLNMvvhXoIdV"}},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"LThhpSINoMHN"}},{"cell_type":"code","source":["\n","# Ваше решение здесь\n","import csv\n","from collections import defaultdict\n","from datetime import datetime\n","\n","start = defaultdict(lambda: defaultdict(datetime))\n","end = defaultdict(lambda: defaultdict(datetime))\n","data = []\n","\n","with open('codesubmit.csv', newline='') as csvfile:\n","    reader = csv.DictReader(csvfile, delimiter=';')\n","    for row in reader:\n","      data.append(row)\n","\n","for r in data:\n","  problem_id = r['problem_id']\n","  user_id = r['user_id']\n","  created_at = datetime.strptime(r['created_at'], '%Y-%m-%d %H:%M:%S.%f')\n","  day = created_at.strftime('%Y-%m-%d')\n","  if day not in start[user_id]:\n","    start[user_id][day] = created_at\n","  else:\n","    start[user_id][day] = min(start[user_id][day], created_at)\n","\n","  if day not in end[user_id]:\n","    end[user_id][day] = created_at\n","  else:\n","    end[user_id][day] = max(end[user_id][day], created_at)\n","\n","time_per_user = []\n","\n","for user_id, days in start.items():\n","    times_for_this_user = []\n","    for day, start_time in days.items():\n","        if day in end[user_id] and end[user_id][day] != start_time:\n","            time_taken = end[user_id][day] - start_time\n","            times_for_this_user.append(time_taken.total_seconds()/60/60)\n","        else:\n","            times_for_this_user.append(0)\n","\n","    if times_for_this_user:\n","      average_time_for_user = sum(times_for_this_user) / len(times_for_this_user)\n","      time_per_user.append(average_time_for_user)\n","\n","if time_per_user:\n","    res2 = sum(time_per_user) / len(time_per_user)\n","    res2 = round(res2, 2)\n","else:\n","    res2 = 0.0\n","\n","print(res2)\n"],"metadata":{"id":"9s8JBMlboJuf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748339210725,"user_tz":-240,"elapsed":76,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"95bb8a68-0164-441d-a845-18e82bd4b8ec"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1.7\n"]}]},{"cell_type":"markdown","source":["✏️ ✏️ ✏️\n","\n","**Проверка**\n","\n","Чтобы проверить свое решение, запустите код в следующих ячейках"],"metadata":{"id":"GN_PNZICsxRD"}},{"cell_type":"code","source":["try:\n","    assert res2 == 1.7\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a36bM9j9tD7l","executionInfo":{"status":"ok","timestamp":1748339214641,"user_tz":-240,"elapsed":9,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"de711681-044c-4435-ea5f-6e4b5bd3229b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]},{"cell_type":"markdown","source":["#### **Задача 3**\n","\n","Теперь давайте посмотрим на активные сеансы. Выясните, сколько задач в среднем решается за один активный сеанс.\n","\n","**Активный сеанс** - период, когда между любой активностью пользователя разница менее или равна часу, не более\n","\n","**Важно**: в расчет берем не только успешные попытки решений (`is_correct=1`), а и неуспешные тоже (`is_correct=0`), и тип `run` в том числе.\n","\n","Результат - число типа `float`, округлите до 2 знаков после запятой и запишите в переменную `res3`."],"metadata":{"id":"AwB-HtPLtjyl"}},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"GOTB--hmt2xw"}},{"cell_type":"code","source":["import csv\n","from collections import defaultdict\n","from datetime import datetime\n","from datetime import timedelta\n","\n","sessions_by_user = defaultdict(list)\n","user_activity = defaultdict(list)\n","sessions_unique_problems = defaultdict(list)\n","count_sessions_by_user = defaultdict(int)\n","\n","data = []\n","\n","with open('codesubmit.csv', newline='') as csvfile:\n","    reader = csv.DictReader(csvfile, delimiter=';')\n","    for row in reader:\n","      data.append(row)\n","\n","for r in data:\n","  problem_id = r['problem_id']\n","  user_id = r['user_id']\n","  created_at = datetime.strptime(r['created_at'], '%Y-%m-%d %H:%M:%S.%f')\n","  user_activity[user_id].append({'created_at': created_at, 'problem_id': problem_id})\n","  sessions_by_user[user_id].append(created_at)\n","\n","for user_id in sessions_by_user:\n","    sessions_by_user[user_id].sort()\n","\n","for user_id in user_activity:\n","    user_activity[user_id].sort(key=lambda x: x['created_at'])\n","\n","for user_id, time in sessions_by_user.items():\n","  cnt_sessions = 1\n","  if len(time) > 1:\n","    for i in range(len(time)-2):\n","      if (time[i+1] - time[i]).total_seconds() > 3600 and (time[i+2] - time[i+1]).total_seconds() <= 3600:\n","        cnt_sessions += 1\n","  count_sessions_by_user[user_id] = cnt_sessions\n","\n","for user_id, activities in user_activity.items():\n","    if not activities:\n","        continue\n","\n","    current_session_problems = set()\n","    session_start_time = activities[0]['created_at']\n","    current_session_problems.add(activities[0]['problem_id'])\n","\n","    for i in range(1, len(activities)):\n","        time_diff = activities[i]['created_at'] - activities[i-1]['created_at']\n","\n","        if time_diff > timedelta(hours=1):\n","            sessions_unique_problems[user_id].append(len(current_session_problems))\n","\n","            current_session_problems = set()\n","            session_start_time = activities[i]['created_at']\n","            current_session_problems.add(activities[i]['problem_id'])\n","        else:\n","            current_session_problems.add(activities[i]['problem_id'])\n","\n","    sessions_unique_problems[user_id].append(len(current_session_problems))\n","\n","all_unique_problem_counts = [count for user_sessions in sessions_unique_problems.values() for count in user_sessions]\n","\n","if all_unique_problem_counts:\n","    average_unique_problems_per_session = sum(all_unique_problem_counts) / len(all_unique_problem_counts)\n","    print(f\"Average unique problems solved per session across all users: {average_unique_problems_per_session:.2f}\")\n","else:\n","    print(\"No sessions found to calculate the average.\")\n","\n","res3 = round(average_unique_problems_per_session,2)"],"metadata":{"id":"fz7nRb_ntKMv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748346174582,"user_tz":-240,"elapsed":78,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"ad5f1487-fbf5-4cc2-93bb-e51240768a3d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Average unique problems solved per session across all users: 3.14\n"]}]},{"cell_type":"markdown","source":["✏️ ✏️ ✏️\n","\n","**Проверка**\n","\n","Чтобы проверить свое решение, запустите код в следующих ячейках"],"metadata":{"id":"0-7TiI06t8D0"}},{"cell_type":"code","source":["try:\n","    assert res3 == 3.14\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"id":"eOzvKzYqt_UH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748346178593,"user_tz":-240,"elapsed":6,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"6cbe7649-50d5-4419-d7fd-7bed5583e806"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]},{"cell_type":"markdown","source":["#### **Задача 4**\n","\n","И финальная - найдите самый \"популярный\" час дня на нашей платформе.\n","\n","Популярность определяем максимальным количеством уникальных пользователей, совершающих какую-либо активность в этот период\n","\n","Результат в числовом формате запишите в переменную `res4`.\n","\n","Например, самым популярным часом стал период с 22 до 23, тогда в переменной `res4` должно лежать **22**. Обозначающее начало этого периода."],"metadata":{"id":"7YYyJ9pIOiu0"}},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"iSMSae9APKaH"}},{"cell_type":"code","source":["\n","import csv\n","from collections import defaultdict\n","from datetime import datetime\n","\n","data = []\n","with open('codesubmit.csv', newline='') as csvfile:\n","    reader = csv.DictReader(csvfile, delimiter=';')\n","    for row in reader:\n","        data.append(row)\n","\n","hours = defaultdict(set)\n","for r in data:\n","    created_at = datetime.strptime(r['created_at'], '%Y-%m-%d %H:%M:%S.%f')\n","    hour = created_at.strftime('%H')\n","    user_id = r['user_id']\n","    hours[hour].add(user_id)\n","hour_with_most_users = max(hours, key=lambda h: len(hours[h]))\n","res4 = int(hour_with_most_users)\n","print(res4)"],"metadata":{"id":"YR3WT5QlPH75","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748339934729,"user_tz":-240,"elapsed":54,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"3ba5441e-6765-40e4-a93f-e1dde69edd7c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["16\n"]}]},{"cell_type":"markdown","source":["✏️ ✏️ ✏️\n","\n","**Проверка**\n","\n","Чтобы проверить свое решение, запустите код в следующих ячейках"],"metadata":{"id":"8BacSt70PPhN"}},{"cell_type":"code","source":["try:\n","    assert res4 == 16\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"id":"8xdTbZWOPMp1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748339937787,"user_tz":-240,"elapsed":6,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"9272ef2f-c66d-4065-ed93-fa808f0e7d15"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]}]}