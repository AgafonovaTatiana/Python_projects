{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1AVTbnmnXDdwwxosBcG1blrWBhu8sTDop","timestamp":1748866077443},{"file_id":"1S8wPY11tMObAjUASNQyVJYJuBFQ5e7Qv","timestamp":1688359205720},{"file_id":"11n0i-MezlCnVIRHY4UsPDC1Wiv-4Wso9","timestamp":1688353661033},{"file_id":"1XvUr4thqwMBmrW-5_ZNS-lXFFOYLUS2f","timestamp":1682611812659}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## **3 кейс**\n","\n","**CRM**"],"metadata":{"id":"XUqCUBW5fUST"}},{"cell_type":"markdown","source":["**Задание**\n","\n","Мы получили запрос от наших маркетологов, которые хотят интегрировать CRM-систему с веб-приложением и просим вас разработать заготовку для интеграции с CRM-системой. Заготовка должна позволять работать с моделью Лида, моделью Симулятора и моделью Воронки продаж.\n","\n","**Модель Лида:**\n","\n","Лид представляет собой человека, который оставил заявку на сайте. Он имеет следующие атрибуты: lead_id, datetime, page, form_title, contacts и name. Класс должен принимать значения атрибутов Лида и сохранять их в объекте.\n","\n","Класс Lead должен также иметь метод to_dict(), который возвращает словарь с атрибутами Лида для дальнейшего использования.\n","\n","**Модель Симулятора:**\n","\n","Симулятор представляет собой информацию о том, каким именно симулятором человек воспользовался при оставлении заявки. Симулятор имеет два атрибута: simulator_type и version.\n","\n","Класс Simulator также должен иметь метод to_dict(), который возвращает словарь с атрибутами Симулятора.\n","\n","**Модель Воронки продаж:**\n","\n","Воронка продаж представляет собой последовательность этапов, через которые проходит лид от момента подачи заявки до завершения продажи. Каждый этап воронки имеет уникальное имя. Вам необходимо создать класс SalesFunnel, который будет представлять модель Воронки продаж. Класс должен принимать список этапов воронки и сохранять его в объекте.\n","\n","Класс также должен иметь метод process_lead(self, lead), который принимает объект Лида и перемещает его по этапам воронки. Причем при перемещении лид должен сохранять информацию о своем текущем этапе."],"metadata":{"id":"eZ-S4ioBVZei"}},{"cell_type":"markdown","source":["### **Решение**"],"metadata":{"id":"CxmnD3GvffQ4"}},{"cell_type":"markdown","source":["#### **Задача 1**\n","\n","Создайте класс `Lead`."],"metadata":{"id":"5bdLXu2ksLB7"}},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"qUL4LtIUnJge"}},{"cell_type":"code","source":["class Lead:\n","  def __init__(self, lead_id, datetime, page, form_title, contacts, name):\n","    self.lead_id = lead_id\n","    self.datetime = datetime\n","    self.page = page\n","    self.form_title = form_title\n","    self.contacts = contacts\n","    self.name = name\n","\n","  def get_lead_id(self):\n","    return self.lead_id\n","  def get_datetime(self):\n","    return self.datetime\n","  def get_page(self):\n","    return self.page\n","  def get_form_title(self):\n","    return self.form_title\n","  def get_contacts(self):\n","    return self.contacts\n","  def get_name(self):\n","    return self.name\n","\n","  def to_dict(self):\n","    return {\n","        \"lead_id\": self.lead_id,\n","        \"datetime\": self.datetime,\n","        \"page\": self.page,\n","        \"form_title\": self.form_title,\n","        \"contacts\": self.contacts,\n","        \"name\": self.name\n","    }"],"metadata":{"id":"Ia39hhmZbNRW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["✏️ ✏️ ✏️\n","\n","**Проверка**\n","\n","Чтобы проверить свое решение, запустите код в следующих ячейках"],"metadata":{"id":"54Tvpn9OkDwV"}},{"cell_type":"code","source":["lead = Lead(1, '2023-07-01 10:00', 'example.com', 'Обратная связь', 'ivan@example.com', 'Иван Иванов')\n","res = lead.to_dict()\n","\n","try:\n","    assert res == {'lead_id': 1,\n","                   'datetime': '2023-07-01 10:00',\n","                   'page': 'example.com',\n","                   'form_title': 'Обратная связь',\n","                   'contacts': 'ivan@example.com',\n","                   'name': 'Иван Иванов'}\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"id":"LkqzVw9skKEC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748866533886,"user_tz":-240,"elapsed":13,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"10469be5-61cf-48d3-86b7-29f0701f34c6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]},{"cell_type":"markdown","source":["#### **Задача 2**\n","\n","Создайте класс `Simulator`."],"metadata":{"id":"QLNMvvhXoIdV"}},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"LThhpSINoMHN"}},{"cell_type":"code","source":["class Simulator:\n","  def __init__(self, simulator_type, version):\n","    self.simulator_type = simulator_type\n","    self.version = version\n","\n","  def get_simulator_type(self):\n","    return self.simulator_type\n","  def get_version(self):\n","    return self.version\n","\n","  def to_dict(self):\n","    return {\n","        \"simulator_type\": self.simulator_type,\n","        \"version\": self.version\n","    }\n"],"metadata":{"id":"9s8JBMlboJuf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["✏️ ✏️ ✏️\n","\n","**Проверка**\n","\n","Чтобы проверить свое решение, запустите код в следующих ячейках"],"metadata":{"id":"GN_PNZICsxRD"}},{"cell_type":"code","source":["simulator = Simulator('Type A', '1.0')\n","res2 = simulator.to_dict()\n","\n","try:\n","    assert res2 == {'simulator_type': 'Type A', 'version': '1.0'}\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a36bM9j9tD7l","executionInfo":{"status":"ok","timestamp":1748866596618,"user_tz":-240,"elapsed":17,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"d806f3fe-6312-4234-fd9f-11aa6a0526a2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]},{"cell_type":"markdown","source":["#### **Задача 3**\n","\n","Определите класс `SalesFunnel`. Пока без метода `process_lead`."],"metadata":{"id":"AwB-HtPLtjyl"}},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"GOTB--hmt2xw"}},{"cell_type":"code","source":["class SalesFunnel:\n","  stages = []\n","\n","  def __init__(self):\n","    ...\n","\n","  def add_stage(self, stage):\n","\n","    self.stage = stage\n","    self.stages.append(stage)\n","\n"],"metadata":{"id":"fz7nRb_ntKMv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["✏️ ✏️ ✏️\n","\n","**Проверка**\n","\n","Чтобы проверить свое решение, запустите код в следующих ячейках"],"metadata":{"id":"0-7TiI06t8D0"}},{"cell_type":"code","source":["funnel = SalesFunnel()\n","funnel.add_stage('Stage 1')\n","funnel.add_stage('Stage 2')\n","funnel.add_stage('Stage 3')\n","res3 = funnel.stages\n","\n","try:\n","    assert res3 == ['Stage 1', 'Stage 2', 'Stage 3']\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KzV-hUKcvxb2","executionInfo":{"status":"ok","timestamp":1748866887754,"user_tz":-240,"elapsed":15,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"ae0e9ee6-bf73-47dc-a1ee-70e541e7fdb2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]},{"cell_type":"markdown","source":["#### **Задача 4**\n","\n","К классу `SalesFunnel` добавьте метод `process_lead`."],"metadata":{"id":"CgRs9f--z9N-"}},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"HAC66WJB0DtG"}},{"cell_type":"code","source":["import requests\n","\n","class SalesFunnel:\n","\n","  def __init__(self, stages_funnel):\n","    self.stages = stages_funnel\n","\n","  def add_stage(self, stage):\n","\n","    self.stage = stage\n","    self.stages.append(stage)\n","\n","  def process_lead(self, lead):\n","    self.lead = lead\n","\n","    logs = []\n","\n","    for i in range(len(self.stages)):\n","      crm_url = \"https://itresume.com/crm/api/leads\"\n","      crm_params = {\n","                    'lead_id': lead.lead_id,\n","                    'datetime': lead.datetime,\n","                    'page': lead.page,\n","                    'form_title': lead.form_title,\n","                    'contacts': lead.contacts,\n","                    'name': lead.name\n","                    }\n","      response = requests.post(crm_url, json=crm_params)\n","\n","      logs.append(f'Обработка лида {self.lead.lead_id} - Текущий этап: {self.stages[i]}')\n","      if response.status_code != 200:\n","        if i < len(self.stages) - 1:\n","            logs.append(f'Не удалось отправить данные лида в CRM')\n","            logs.append(f'Перемещаем лид {self.lead.lead_id} на следующий этап: {self.stages[i+1]}')\n","            break\n","      else:\n","            # Handle the case where there is no next stage (e.g., the lead is dropped)\n","            logs.append(f'Лид {self.lead.lead_id} не удалось обработать на последнем этапе.')\n","\n","    return logs\n","\n","sales_funnel = SalesFunnel([\"Генерация лида\", \"Подтверждение\", \"Предложение\", \"Возражение\"])\n","lead = Lead(\"123\", \"2023-07-01\", \"example.com\", \"Свяжитесь с нами\", \"ivan@example.com\", \"Иван Иванов\")\n","res4 = sales_funnel.process_lead(lead)\n","print(res4)\n","\n"],"metadata":{"id":"63tUPEeLz5e1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748868073458,"user_tz":-240,"elapsed":122,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"5c7d4d0f-e562-4b65-9766-0275d5e8d8f5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['Обработка лида 123 - Текущий этап: Генерация лида', 'Не удалось отправить данные лида в CRM', 'Перемещаем лид 123 на следующий этап: Подтверждение']\n"]}]},{"cell_type":"markdown","source":["✏️ ✏️ ✏️\n","\n","**Проверка**\n","\n","Чтобы проверить свое решение, запустите код в следующих ячейках"],"metadata":{"id":"wAeUY7ey0JGJ"}},{"cell_type":"code","source":["sales_funnel = SalesFunnel([\"Генерация лида\", \"Подтверждение\", \"Предложение\", \"Возражение\"])\n","lead = Lead(\"123\", \"2023-07-01\", \"example.com\", \"Свяжитесь с нами\", \"ivan@example.com\", \"Иван Иванов\")\n","res4 = sales_funnel.process_lead(lead)\n","\n","try:\n","    assert res4 == ['Обработка лида 123 - Текущий этап: Генерация лида',\n","                    'Не удалось отправить данные лида в CRM',\n","                    'Перемещаем лид 123 на следующий этап: Подтверждение']\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e2nVbdAn1IjH","executionInfo":{"status":"ok","timestamp":1748868081942,"user_tz":-240,"elapsed":126,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"5e798ca8-88d7-4ecb-8e39-3bc1bef7d6e1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"5TrEuC1O1dmg"},"execution_count":null,"outputs":[]}]}