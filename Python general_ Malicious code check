{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Dw_H7TbCcx2pa7d8_iW3bB0EvxaGstWv","timestamp":1747909239535},{"file_id":"11n0i-MezlCnVIRHY4UsPDC1Wiv-4Wso9","timestamp":1685693833759},{"file_id":"1XvUr4thqwMBmrW-5_ZNS-lXFFOYLUS2f","timestamp":1682611812659}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## **1 кейс**\n","\n","**Система автопроверки**"],"metadata":{"id":"XUqCUBW5fUST"}},{"cell_type":"markdown","source":["**Задача**\n","\n","Мы предлагаем вам написать автоматическую систему проверки кода! Конечно, повторить полную архитектуру, у нас наверное не хватит ни времени, ни навыков, но написать небольшую копию - вполне!\n","\n","**Первая часть**\n","\n","Мы дадим вам два файла .py - эталонный код и код пользователя, а вам необходимо будет написать систему, которая проверит их на заданных тестовых случаях и вернет соответствующие результаты.\n","\n","Каждый код необходимо прогнать на тестовых случаях, которые будут даны в шаблоне. Если код будет возвращать ошибку - эту ошибку необходимо записать в файл output.txt в следующем формате: \"Ошибка при выполнении кода пользователя: {}\", где будет указана полученная ошибка. Причем, в таком случае, работа автопроверки должна остановиться.\n","\n","Если же код не вызывает никаких ошибок, мы можем проверить все тестовые случаи. Если код проходит тестовый случай - то есть результат кода студента равен результату эталонного кода - запишите в файл \"Тест пройден\".\n","\n","Если же тестовый случай не пройден - надо вывести ожидаемый результат и результат пользователя.\n","\n","**Вторая часть**\n","\n","Одна из важнейших частей автопроверки - предварительная проверка кода пользователя на наличие вредоносного кода. Теперь нам нужно к коду написанному в прошлой части добавить проверку на вредоносность.\n","\n","Для этого мы предлагаем вам написать отдельную функцию check_for_malicious_code, которая будет принимать код и путь к файлу.\n","\n","Что делает функция check_for_malicious_code:\n","\n","Функция принимает два аргумента: code и output_file. Аргумент code содержит код, который нужно проверить на наличие вредоносных элементов. Аргумент output_file содержит имя файла, в который будут записываться результаты проверки.\n","Далее, функция использует модуль ast для анализа кода. Анализ происходит в два этапа:\n","С помощью функции ast.parse(code) создается объект-дерево, которое представляет структуру синтаксического разбора кода.\n","Затем, с помощью функции ast.walk(tree) происходит обход дерева и поиск запрещенных элементов.\n","В процессе обхода дерева, функция ищет несколько типов запрещенных элементов:\n","\n","Атрибуты с именами, перечисленными в списке FORBIDDEN_NAMES, к ним относятся (exec). Если такой атрибут найден, то функция выбрасывает исключение ValueError и записывается сообщение: Код содержит запрещенный атрибут: {имя}.\n","\n","Если в коде вызывается eval без аргументов - вызовите исключение ValueError и запишите соответствующее сообщение в файл: Код содержит вызов eval().\n","\n","Если при анализе кода возникает синтаксическая ошибка, перехватите её и запишите в файл соответствующую ошибку Код содержит синтаксическую ошибку: {тип ошибки}.\n","\n","Если в коде обнаруживаются другие ошибки, запишите в файл Код содержит вредоносные элементы: {}.\n","\n","Если в коде обнаруживаются запрещенные элементы или возникает синтаксическая ошибка, то функция должна завершить свою работу и вернуть соответствующую ошибку.\n","\n","Важно: предварительно, если вызов функции check_for_malicious_code вызывает любую ошибку - в файл необходимо записать: \"Ошибка при проверке модуля user_malicious:\" и на следующей строке записать детали ошибок, описанные выше.\n","\n","Если же все проверки пройдены успешно, то функция должна продолжить тестирование кода.\n","\n","**Третья часть**\n","\n","Когда большая часть работы сделана - давайте добавим простую, но не менее важную проверку - на время выполнения кода. Если код студента содержит бесконечный цикл, нежелательно, чтобы наша программа работала так же бесконечно. Поэтому давайте ограничим время пятью секундами.\n","\n","Для реализации этого мы предлагаем вам воспользоваться двумя модулями - time и multiprocessing.\n","\n","Модуль time позволит нам подсчитать время выполнения, однако, если мы получим код с бесконечным циклом и прямо внутри нашей системы попробуем это подсчитать - наш код просто будет подсчитывать время бесконечно. Поэтому нам нужен второй модуль - multiprocessing, который позволит нам вынести выполнение функции в отдельный процесс и замерить его время. Это позволит нам и избежать блокировки основного потока и добавить логику превышения допустимого порога времени."],"metadata":{"id":"l6gKbpxsalFE"}},{"cell_type":"markdown","source":["**Важно**\n","\n","Перед началом решения выполните следующую ячейку, чтобы загрузить два файла - эталонный код и код пользователя."],"metadata":{"id":"OcK9kF9mfZIt"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"KtNBw8nOfPsB","executionInfo":{"status":"ok","timestamp":1747995515365,"user_tz":-240,"elapsed":930,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"3c118adc-39e1-4e54-c10e-8619b11f9658","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["--2025-05-23 10:18:34--  https://gist.github.com/Vs8th/aafed81d81678c807a3ad3dbf93588b2/raw/user.py\n","Resolving gist.github.com (gist.github.com)... 140.82.113.4\n","Connecting to gist.github.com (gist.github.com)|140.82.113.4|:443... connected.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: https://gist.githubusercontent.com/Vs8th/aafed81d81678c807a3ad3dbf93588b2/raw/user.py [following]\n","--2025-05-23 10:18:34--  https://gist.githubusercontent.com/Vs8th/aafed81d81678c807a3ad3dbf93588b2/raw/user.py\n","Resolving gist.githubusercontent.com (gist.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to gist.githubusercontent.com (gist.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 106 [text/plain]\n","Saving to: ‘user.py’\n","\n","\ruser.py               0%[                    ]       0  --.-KB/s               \ruser.py             100%[===================>]     106  --.-KB/s    in 0s      \n","\n","2025-05-23 10:18:34 (2.11 MB/s) - ‘user.py’ saved [106/106]\n","\n","--2025-05-23 10:18:34--  https://gist.github.com/Vs8th/95f7897019a4213c76e5b65234d31e30/raw/etalon.py\n","Resolving gist.github.com (gist.github.com)... 140.82.113.3\n","Connecting to gist.github.com (gist.github.com)|140.82.113.3|:443... connected.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: https://gist.githubusercontent.com/Vs8th/95f7897019a4213c76e5b65234d31e30/raw/etalon.py [following]\n","--2025-05-23 10:18:34--  https://gist.githubusercontent.com/Vs8th/95f7897019a4213c76e5b65234d31e30/raw/etalon.py\n","Resolving gist.githubusercontent.com (gist.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to gist.githubusercontent.com (gist.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 31 [text/plain]\n","Saving to: ‘etalon.py’\n","\n","etalon.py           100%[===================>]      31  --.-KB/s    in 0s      \n","\n","2025-05-23 10:18:35 (653 KB/s) - ‘etalon.py’ saved [31/31]\n","\n","--2025-05-23 10:18:35--  https://gist.github.com/Vs8th/59f797dfbd33f9a4be1e5ed43bb42f4d/raw/res_cor.txt\n","Resolving gist.github.com (gist.github.com)... 140.82.113.3\n","Connecting to gist.github.com (gist.github.com)|140.82.113.3|:443... connected.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: https://gist.githubusercontent.com/Vs8th/59f797dfbd33f9a4be1e5ed43bb42f4d/raw/res_cor.txt [following]\n","--2025-05-23 10:18:35--  https://gist.githubusercontent.com/Vs8th/59f797dfbd33f9a4be1e5ed43bb42f4d/raw/res_cor.txt\n","Resolving gist.githubusercontent.com (gist.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to gist.githubusercontent.com (gist.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 355 [text/plain]\n","Saving to: ‘res_cor.txt’\n","\n","res_cor.txt         100%[===================>]     355  --.-KB/s    in 0s      \n","\n","2025-05-23 10:18:35 (8.41 MB/s) - ‘res_cor.txt’ saved [355/355]\n","\n"]}],"source":["!wget https://gist.github.com/Vs8th/aafed81d81678c807a3ad3dbf93588b2/raw/user.py\n","\n","!wget https://gist.github.com/Vs8th/95f7897019a4213c76e5b65234d31e30/raw/etalon.py\n","\n","!wget https://gist.github.com/Vs8th/59f797dfbd33f9a4be1e5ed43bb42f4d/raw/res_cor.txt"]},{"cell_type":"markdown","source":["Давайте сразу посмотрим с каким кодом мы имеем дело."],"metadata":{"id":"JIwIK2E5fcyA"}},{"cell_type":"code","source":["with open('etalon.py', 'r') as f:\n","    lines = f.readlines()\n","\n","lines"],"metadata":{"id":"6f84pObFfbGE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1747995519876,"user_tz":-240,"elapsed":21,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"c9cc1adb-3cd3-4e8e-a721-8150a559d1fe"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['def add(a, b):\\n', '    return a + b']"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["with open('user.py', 'r') as f:\n","    lines2 = f.readlines()\n","\n","lines2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zmNFemr6OkB7","executionInfo":{"status":"ok","timestamp":1747995521585,"user_tz":-240,"elapsed":12,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"23e55100-36f5-479e-8f26-5c528d9a859e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['def add_numbers(a, b):\\n',\n"," '    return a - b  # Ошибка: нужно сложить, а не вычесть']"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["### **Решения**"],"metadata":{"id":"CxmnD3GvffQ4"}},{"cell_type":"markdown","source":["#### **Задача 1**\n","\n","Задача не из легких, поэтому начнем по шагам. Для начала напишите функцию `run_tests`, которая прочтет эталонный код и код пользователя из `.py` файлов, выполнит их и сохранит результаты в файл `output.txt`."],"metadata":{"id":"5bdLXu2ksLB7"}},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"qUL4LtIUnJge"}},{"cell_type":"code","source":["import sys\n","import os\n","\n","sys.path\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jgRk4nhzrJbr","executionInfo":{"status":"ok","timestamp":1747995526652,"user_tz":-240,"elapsed":6,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"324b2f7c-b1c7-447e-edb7-5a7c1ba43bff"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['/content',\n"," '/env/python',\n"," '/usr/lib/python311.zip',\n"," '/usr/lib/python3.11',\n"," '/usr/lib/python3.11/lib-dynload',\n"," '',\n"," '/usr/local/lib/python3.11/dist-packages',\n"," '/usr/lib/python3/dist-packages',\n"," '/usr/local/lib/python3.11/dist-packages/IPython/extensions',\n"," '/usr/local/lib/python3.11/dist-packages/setuptools/_vendor',\n"," '/root/.ipython']"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["import importlib\n","import etalon\n","import user\n","\n","test_cases = [(1, 2), (3, 4), (5, 6)]\n","output_file = 'output.txt'\n","\n","def run_tests(test_cases, output_file):\n","\n","  for a, b in test_cases:\n","    try:\n","      if etalon.add(a, b) == user.add_numbers(a, b):\n","        with open(output_file, 'a') as f:\n","          f.write(f\"Тест пройден\\n\")\n","      else:\n","        with open(output_file, 'a') as f:\n","            f.write(f\"Тест не пройден\\nОжидаемый результат: {etalon.add(a, b)}\\nРезультат пользователя: {user.add_numbers(a, b)}\\n\")\n","    except Exception as err:\n","      with open(output_file, 'a') as f:\n","        f.write(f\"Ошибка при выполнении кода пользователя: {err}\")\n","      break\n","run_tests(test_cases, output_file)\n"],"metadata":{"id":"ymmsa-OaYfKH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["✏️ ✏️ ✏️\n","\n","**Проверка**\n","\n","Чтобы проверить свое решение, запустите код в следующих ячейках"],"metadata":{"id":"54Tvpn9OkDwV"}},{"cell_type":"code","source":["with open('output.txt', 'r') as file1:\n","    res1 = file1.read()\n","\n","with open('res_cor.txt', 'r') as file2:\n","    res2 = file2.read()\n","\n","try:\n","    assert res1 == res2\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"id":"LkqzVw9skKEC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1747995534558,"user_tz":-240,"elapsed":7,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"923911c1-70aa-49f0-97ee-6d0aa7b28a2b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]},{"cell_type":"markdown","source":["#### **Задача 2**\n","\n","Теперь давайте двигаться дальше. Нужно добавить проверку на вредоносный код. Напишите отдельную функцию - `check_for_malicious_code`, которую мы будем вызывать перед проверкой кода."],"metadata":{"id":"QLNMvvhXoIdV"}},{"cell_type":"markdown","source":["Перед написанием кода, выполните следующую ячейку, в ней скачивается новый код пользователя, который проверит работу функции `check_for_malicious_code`."],"metadata":{"id":"YZ9QLF2YAhUG"}},{"cell_type":"code","source":["!wget https://gist.github.com/Vs8th/9f6a2c73c755cfcc088c7835ec4fb2c0/raw/user_malicious.py"],"metadata":{"id":"KTn16q3wcTTc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1747995540731,"user_tz":-240,"elapsed":432,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"22fd1bbd-2473-4f84-af61-f4acbbe0d2f7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--2025-05-23 10:19:00--  https://gist.github.com/Vs8th/9f6a2c73c755cfcc088c7835ec4fb2c0/raw/user_malicious.py\n","Resolving gist.github.com (gist.github.com)... 140.82.113.3\n","Connecting to gist.github.com (gist.github.com)|140.82.113.3|:443... connected.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: https://gist.githubusercontent.com/Vs8th/9f6a2c73c755cfcc088c7835ec4fb2c0/raw/user_malicious.py [following]\n","--2025-05-23 10:19:00--  https://gist.githubusercontent.com/Vs8th/9f6a2c73c755cfcc088c7835ec4fb2c0/raw/user_malicious.py\n","Resolving gist.githubusercontent.com (gist.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to gist.githubusercontent.com (gist.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 117 [text/plain]\n","Saving to: ‘user_malicious.py’\n","\n","user_malicious.py   100%[===================>]     117  --.-KB/s    in 0s      \n","\n","2025-05-23 10:19:00 (5.37 MB/s) - ‘user_malicious.py’ saved [117/117]\n","\n"]}]},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"LThhpSINoMHN"}},{"cell_type":"code","source":["with open('user_malicious.py', 'r') as f:\n","    lines3 = f.readlines()\n","\n","lines3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DYmFz4GEp8fS","executionInfo":{"status":"ok","timestamp":1747995602171,"user_tz":-240,"elapsed":5,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"024bab08-a1ee-412c-ffcb-4c9534c003c4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['def add_numbers(a, b):\\n',\n"," '    eval()\\n',\n"," '    return a - b  # Ошибка: нужно сложить, а не вычесть']"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["\n","import importlib\n","import etalon\n","import user\n","import ast\n","import inspect\n","\n","user_file = 'user_malicious.py'\n","code = ''\n","with open(user_file, 'r') as f:\n","  code = f.read()\n","\n","test_cases = [(1, 2), (3, 4), (5, 6)]\n","output_file = 'output.txt'\n","output2_file = 'output2.txt'\n","\n","def check_for_malicious_code(code, output2_file):\n","  tree = ast.parse(code)\n","  print(ast.dump(tree))\n","  for node in ast.walk(tree):\n","    if isinstance(node, ast.Name) and node.id == 'exec':\n","      with open(output2_file, 'w') as f:\n","        f.write(\"Ошибка при проверке модуля user_malicious:\\n\")\n","        f.write(f'Код содержит запрещенный атрибут: {node.id}')\n","      raise ValueError(f'Код содержит запрещенный атрибут: {node.id}')\n","\n","    elif isinstance(node, ast.Call):\n","      if isinstance(node.func, ast.Name) and node.func.id == 'eval' and len(node.args) == 0:\n","        with open(output2_file, 'w') as f:\n","          f.write(\"Ошибка при проверке модуля user_malicious:\\n\")\n","          f.write(f'Код содержит вызов eval()')\n","        raise ValueError(f'Код содержит вызов eval()')\n","  try:\n","    exec(code)\n","  except SyntaxError as err:\n","    with open(output2_file, 'w') as f:\n","      f.write(\"Ошибка при проверке модуля user_malicious:\\n\")\n","      f.write(f'Код содержит синтаксическую ошибку: {err}')\n","\n","  except Exception as err:\n","    with open(output2_file, 'w') as f:\n","      f.write(\"Ошибка при проверке модуля user_malicious:\\n\")\n","      f.write(f'Код содержит вредоносные элементы: {err}')\n","\n","  else:\n","    return None\n","\n","def run_tests(test_cases, output_file):\n","\n","  for a, b in test_cases:\n","    try:\n","      if etalon.add(a, b) == user.add_numbers(a, b):\n","        with open(output_file, 'a') as f:\n","          f.write(f\"Тест пройден\\n\")\n","      else:\n","        with open(output_file, 'a') as f:\n","            f.write(f\"Тест не пройден\\nОжидаемый результат: {etalon.add(a, b)}\\nРезультат пользователя: {user.add_numbers(a, b)}\\n\")\n","    except Exception as err:\n","      with open(output_file, 'a') as f:\n","        f.write(f\"Ошибка при выполнении кода пользователя: {err}\")\n","      break\n","\n","# Проверка на вредоносный код\n","malicious_code_message = check_for_malicious_code(code, output2_file)\n","if malicious_code_message:\n","    with open(output2_file, 'w') as f:\n","        f.write(\"Ошибка при проверке модуля user_malicious:\\n\")\n","        f.write(malicious_code_message)\n","else:\n","    run_tests(test_cases, output_file)\n"],"metadata":{"id":"9s8JBMlboJuf","colab":{"base_uri":"https://localhost:8080/","height":450},"executionInfo":{"status":"error","timestamp":1747998582704,"user_tz":-240,"elapsed":51,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"5827f56e-3cbc-438c-eb1b-9f6b82fa2de6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Module(body=[FunctionDef(name='add_numbers', args=arguments(posonlyargs=[], args=[arg(arg='a'), arg(arg='b')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='eval', ctx=Load()), args=[], keywords=[])), Return(value=BinOp(left=Name(id='a', ctx=Load()), op=Sub(), right=Name(id='b', ctx=Load())))], decorator_list=[])], type_ignores=[])\n"]},{"output_type":"error","ename":"ValueError","evalue":"Код содержит вызов eval()","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-39-5ac6268876bc>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     61\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m \u001b[0;31m# Проверка на вредоносный код\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m \u001b[0mmalicious_code_message\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_for_malicious_code\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput2_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mmalicious_code_message\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput2_file\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'w'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-39-5ac6268876bc>\u001b[0m in \u001b[0;36mcheck_for_malicious_code\u001b[0;34m(code, output2_file)\u001b[0m\n\u001b[1;32m     29\u001b[0m           \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Ошибка при проверке модуля user_malicious:\\n\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m           \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'Код содержит вызов eval()'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 31\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'Код содержит вызов eval()'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     32\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m     \u001b[0mexec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Код содержит вызов eval()"]}]},{"cell_type":"markdown","source":["✏️ ✏️ ✏️\n","\n","**Проверка**\n","\n","Чтобы проверить свое решение, запустите код в следующих ячейках"],"metadata":{"id":"GN_PNZICsxRD"}},{"cell_type":"code","source":["# Здесь будет скачиваться файл с эталонным ответом\n","\n","!wget https://gist.github.com/Vs8th/5197125c5ef1e1b34b7d73adccdaf4bb/raw/cor_output_2.txt"],"metadata":{"id":"tys9eJRSqcEW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1747997244256,"user_tz":-240,"elapsed":318,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"fb123035-d681-4142-a819-d4ce4817b13c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--2025-05-23 10:47:24--  https://gist.github.com/Vs8th/5197125c5ef1e1b34b7d73adccdaf4bb/raw/cor_output_2.txt\n","Resolving gist.github.com (gist.github.com)... 140.82.113.3\n","Connecting to gist.github.com (gist.github.com)|140.82.113.3|:443... connected.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: https://gist.githubusercontent.com/Vs8th/5197125c5ef1e1b34b7d73adccdaf4bb/raw/cor_output_2.txt [following]\n","--2025-05-23 10:47:24--  https://gist.githubusercontent.com/Vs8th/5197125c5ef1e1b34b7d73adccdaf4bb/raw/cor_output_2.txt\n","Resolving gist.githubusercontent.com (gist.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to gist.githubusercontent.com (gist.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 107 [text/plain]\n","Saving to: ‘cor_output_2.txt’\n","\n","cor_output_2.txt    100%[===================>]     107  --.-KB/s    in 0s      \n","\n","2025-05-23 10:47:24 (2.04 MB/s) - ‘cor_output_2.txt’ saved [107/107]\n","\n"]}]},{"cell_type":"code","source":["with open('output2.txt', 'r') as file1:\n","    res1 = file1.read()\n","\n","with open('cor_output_2.txt', 'r') as file2:\n","    res2 = file2.read()\n","\n","try:\n","    assert res1== res2\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1GWodeoioj0p","executionInfo":{"status":"ok","timestamp":1747998159148,"user_tz":-240,"elapsed":13,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"a0735611-94f7-4911-d1b9-8d3a81c3a92e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]},{"cell_type":"markdown","source":["#### **Задача 3**\n","\n","Движемся дальше - последнее, что нам нужно проверить - время выполнения. Если время выполнения превышает 5 секунд, уведомите об этом пользователя и остановите выполнение проверки."],"metadata":{"id":"AwB-HtPLtjyl"}},{"cell_type":"markdown","source":["Перед написанием кода, выполните следующую ячейку, в ней скачивается новый код пользователя, который проверит работу проверки на время выполнения."],"metadata":{"id":"ibykgbg_BEJS"}},{"cell_type":"code","source":["!wget https://gist.github.com/Vs8th/4aba49489a8b0843ef85c4a1a93f923d/raw/user_inf.py"],"metadata":{"id":"8N4EK36Erkic","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1747999026265,"user_tz":-240,"elapsed":318,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"7831d437-543f-4728-ef44-4a17a05a661b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--2025-05-23 11:17:06--  https://gist.github.com/Vs8th/4aba49489a8b0843ef85c4a1a93f923d/raw/user_inf.py\n","Resolving gist.github.com (gist.github.com)... 140.82.113.3\n","Connecting to gist.github.com (gist.github.com)|140.82.113.3|:443... connected.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: https://gist.githubusercontent.com/Vs8th/4aba49489a8b0843ef85c4a1a93f923d/raw/user_inf.py [following]\n","--2025-05-23 11:17:06--  https://gist.githubusercontent.com/Vs8th/4aba49489a8b0843ef85c4a1a93f923d/raw/user_inf.py\n","Resolving gist.githubusercontent.com (gist.githubusercontent.com)... 185.199.109.133, 185.199.111.133, 185.199.110.133, ...\n","Connecting to gist.githubusercontent.com (gist.githubusercontent.com)|185.199.109.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 55 [text/plain]\n","Saving to: ‘user_inf.py’\n","\n","user_inf.py         100%[===================>]      55  --.-KB/s    in 0s      \n","\n","2025-05-23 11:17:06 (2.59 MB/s) - ‘user_inf.py’ saved [55/55]\n","\n"]}]},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"GOTB--hmt2xw"}},{"cell_type":"code","source":["with open('user_inf.py', 'r') as f:\n","    lines4 = f.readlines()\n","\n","lines4"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fjf_j7q631sq","executionInfo":{"status":"ok","timestamp":1747999241968,"user_tz":-240,"elapsed":10,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"477d1144-1378-4cca-9d7b-a38993fdc489"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['def add_numbers(a, b):\\n', '    while True:\\n', '        continue']"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["import importlib\n","import etalon\n","import user\n","import user_inf\n","import ast\n","import inspect\n","import time\n","import multiprocessing as mp\n","\n","user_file = 'user_inf.py'\n","code = ''\n","with open(user_file, 'r') as f:\n","  code = f.read()\n","\n","test_cases = [(1, 2), (3, 4), (5, 6)]\n","output_file = 'output.txt'\n","output2_file = 'output2.txt'\n","output3_file = 'output3.txt'\n","\n","def check_for_malicious_code(code, output2_file):\n","\n","  tree = ast.parse(code)\n","  for node in ast.walk(tree):\n","    if isinstance(node, ast.Name) and node.id == 'exec':\n","      with open(output2_file, 'w') as f:\n","        f.write(\"Ошибка при проверке модуля user_malicious:\\n\")\n","        f.write(f'Код содержит запрещенный атрибут: {node.id}')\n","      raise ValueError(f'Код содержит запрещенный атрибут: {node.id}')\n","\n","    elif isinstance(node, ast.Call):\n","      if isinstance(node.func, ast.Name) and node.func.id == 'eval' and len(node.args) == 0:\n","        with open(output2_file, 'w') as f:\n","          f.write(\"Ошибка при проверке модуля user_malicious:\\n\")\n","          f.write(f'Код содержит вызов eval()')\n","        raise ValueError(f'Код содержит вызов eval()')\n","  try:\n","    exec(code)\n","  except SyntaxError as err:\n","    with open(output2_file, 'w') as f:\n","      f.write(\"Ошибка при проверке модуля user_malicious:\\n\")\n","      f.write(f'Код содержит синтаксическую ошибку: {err}')\n","\n","  except Exception as err:\n","    with open(output2_file, 'w') as f:\n","      f.write(\"Ошибка при проверке модуля user_malicious:\\n\")\n","      f.write(f'Код содержит вредоносные элементы: {err}')\n","\n","  else:\n","    return None\n","\n","def run_tests(test_cases, output_file):\n","\n","  for a, b in test_cases:\n","    try:\n","      if etalon.add(a, b) == user.add_numbers(a, b):\n","        with open(output_file, 'a') as f:\n","          f.write(f\"Тест пройден\\n\")\n","      else:\n","        with open(output_file, 'a') as f:\n","            f.write(f\"Тест не пройден\\nОжидаемый результат: {etalon.add(a, b)}\\nРезультат пользователя: {user.add_numbers(a, b)}\\n\")\n","    except Exception as err:\n","      with open(output_file, 'a') as f:\n","        f.write(f\"Ошибка при выполнении кода пользователя: {err}\")\n","      break\n","\n","# Проверка на вредоносный код\n","\n","process = mp.Process(target=user_inf.add_numbers, args=(1, 2))\n","process.start()\n","process.join(timeout=5)\n","if process.is_alive():\n","  with open(output3_file, 'w') as f:\n","    f.write(f'Предупреждение: время выполнения превышает 5 секунд.')\n","  process.terminate()\n","  print (f'Предупреждение: время выполнения превышает 5 секунд.')\n","\n","malicious_code_message = check_for_malicious_code(code, output3_file)\n","if malicious_code_message:\n","    with open(output3_file, 'w') as f:\n","        f.write(\"Ошибка при проверке модуля user_malicious:\\n\")\n","        f.write(malicious_code_message)\n","else:\n","    run_tests(test_cases, output_file)\n"],"metadata":{"id":"fz7nRb_ntKMv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748001790513,"user_tz":-240,"elapsed":5030,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"fda38774-02d5-49a8-cde2-826a8590fe12"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Предупреждение: время выполнения превышает 5 секунд.\n"]}]},{"cell_type":"markdown","source":["✏️ ✏️ ✏️\n","\n","**Проверка**\n","\n","Чтобы проверить свое решение, запустите код в следующих ячейках"],"metadata":{"id":"0-7TiI06t8D0"}},{"cell_type":"code","source":["# Здесь будет скачиваться файл с эталонным ответом\n","\n","!wget https://gist.github.com/Vs8th/cfcafbd2cd46e8905555b02eae78406e/raw/cor_res_3.txt"],"metadata":{"id":"eOzvKzYqt_UH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1747999692591,"user_tz":-240,"elapsed":323,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"6a7a229f-85df-4fb5-a1a2-6a35b663db6e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--2025-05-23 11:28:12--  https://gist.github.com/Vs8th/cfcafbd2cd46e8905555b02eae78406e/raw/cor_res_3.txt\n","Resolving gist.github.com (gist.github.com)... 140.82.114.4\n","Connecting to gist.github.com (gist.github.com)|140.82.114.4|:443... connected.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: https://gist.githubusercontent.com/Vs8th/cfcafbd2cd46e8905555b02eae78406e/raw/cor_res_3.txt [following]\n","--2025-05-23 11:28:12--  https://gist.githubusercontent.com/Vs8th/cfcafbd2cd46e8905555b02eae78406e/raw/cor_res_3.txt\n","Resolving gist.githubusercontent.com (gist.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to gist.githubusercontent.com (gist.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 96 [text/plain]\n","Saving to: ‘cor_res_3.txt’\n","\n","cor_res_3.txt       100%[===================>]      96  --.-KB/s    in 0s      \n","\n","2025-05-23 11:28:12 (4.09 MB/s) - ‘cor_res_3.txt’ saved [96/96]\n","\n"]}]},{"cell_type":"code","source":["with open('output3.txt', 'r') as file1:\n","    res1 = file1.read()\n","\n","with open('cor_res_3.txt', 'r') as file2:\n","    res2 = file2.read()\n","\n","try:\n","    assert res1 == res2\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KzV-hUKcvxb2","executionInfo":{"status":"ok","timestamp":1748001798690,"user_tz":-240,"elapsed":46,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"050719e6-e1e6-43bb-a191-e5c2d79c89df"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"hOoDBgK7sqMK"},"execution_count":null,"outputs":[]}]}