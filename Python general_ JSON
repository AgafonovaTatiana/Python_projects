{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1wFUjV8u0lJRiU5Vs9_AEfJEV2EB3H_Di","timestamp":1748346325608},{"file_id":"11n0i-MezlCnVIRHY4UsPDC1Wiv-4Wso9","timestamp":1685714908390},{"file_id":"1XvUr4thqwMBmrW-5_ZNS-lXFFOYLUS2f","timestamp":1682611812659}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## **3 кейс**\n","\n","**Пользовательские сессии**"],"metadata":{"id":"XUqCUBW5fUST"}},{"cell_type":"markdown","source":["**Задача**\n","\n","У нас есть некоторая выгрузка по пользователям, где собраны данные: пользователь, время визита и страница в формате JSON.\n","\n","По каждому пользователю приведена JSON строка с его сессией. Первая дата - начало данной сессии, затем число - длительность данной сессии в секундах, а далее список списков, где собраны последовательная информация о посещенных страницах и времени посещения. У каких-то пользователей будет страница conversion, это - совершение целевого действия.\n","\n","**Что понадобится сделать:**\n","\n","Прочитать файл\n","\n","Десериализовать каждую JSON-строку в объект Python\n","\n","Преобразовать даты и время к типу datetime\n","\n","И в каком вам удобно формате сохранить себе данные"],"metadata":{"id":"GUa7zitRYjkV"}},{"cell_type":"markdown","source":["**Важно**\n","\n","Перед началом решения выполните следующую ячейку, чтобы загрузить необходимый для работы файл."],"metadata":{"id":"OcK9kF9mfZIt"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"KtNBw8nOfPsB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748417565452,"user_tz":-240,"elapsed":608,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"c9d93f8b-72fe-4476-b1e8-fd9702281ef2"},"outputs":[{"output_type":"stream","name":"stdout","text":["--2025-05-28 07:32:44--  https://gist.github.com/Vs8th/9fcfa729905072c12b1e535c71565a68/raw/sessions.csv\n","Resolving gist.github.com (gist.github.com)... 140.82.114.3\n","Connecting to gist.github.com (gist.github.com)|140.82.114.3|:443... connected.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: https://gist.githubusercontent.com/Vs8th/9fcfa729905072c12b1e535c71565a68/raw/sessions.csv [following]\n","--2025-05-28 07:32:44--  https://gist.githubusercontent.com/Vs8th/9fcfa729905072c12b1e535c71565a68/raw/sessions.csv\n","Resolving gist.githubusercontent.com (gist.githubusercontent.com)... 185.199.111.133, 185.199.108.133, 185.199.110.133, ...\n","Connecting to gist.githubusercontent.com (gist.githubusercontent.com)|185.199.111.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 1880014 (1.8M) [text/plain]\n","Saving to: ‘sessions.csv.1’\n","\n","sessions.csv.1      100%[===================>]   1.79M  --.-KB/s    in 0.07s   \n","\n","2025-05-28 07:32:45 (24.7 MB/s) - ‘sessions.csv.1’ saved [1880014/1880014]\n","\n"]}],"source":["!wget https://gist.github.com/Vs8th/9fcfa729905072c12b1e535c71565a68/raw/sessions.csv"]},{"cell_type":"markdown","source":["Чтобы посмотреть как он выглядит выполните следующую ячейку."],"metadata":{"id":"JIwIK2E5fcyA"}},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_csv('sessions.csv')\n","df"],"metadata":{"id":"6f84pObFfbGE","colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"status":"ok","timestamp":1748413468861,"user_tz":-240,"elapsed":668,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"4f3230ae-e30d-4a06-8766-05546c31d7e5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      user_id                                            session\n","0       user0  [\"2023-05-06 20:43:45\", 1192, [[\"page0\", \"2023...\n","1       user1  [\"2023-05-03 15:39:47\", 1642, [[\"page0\", \"2023...\n","2       user1  [\"2023-05-16 21:24:30\", 506, [[\"page0\", \"2023-...\n","3       user1  [\"2023-05-09 01:41:35\", 1004, [[\"page0\", \"2023...\n","4       user1  [\"2023-05-26 05:31:50\", 984, [[\"page0\", \"2023-...\n","...       ...                                                ...\n","5278  user998  [\"2023-05-26 17:33:49\", 631, [[\"page0\", \"2023-...\n","5279  user998  [\"2023-05-15 23:21:39\", 1393, [[\"page0\", \"2023...\n","5280  user998  [\"2023-05-16 10:15:48\", 1448, [[\"page0\", \"2023...\n","5281  user998  [\"2023-05-26 17:06:25\", 810, [[\"page0\", \"2023-...\n","5282  user999  [\"2023-05-20 08:08:50\", 744, [[\"page0\", \"2023-...\n","\n","[5283 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-77fdcc6c-51e4-45fe-9625-b2abe059070a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>session</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>user0</td>\n","      <td>[\"2023-05-06 20:43:45\", 1192, [[\"page0\", \"2023...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>user1</td>\n","      <td>[\"2023-05-03 15:39:47\", 1642, [[\"page0\", \"2023...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>user1</td>\n","      <td>[\"2023-05-16 21:24:30\", 506, [[\"page0\", \"2023-...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>user1</td>\n","      <td>[\"2023-05-09 01:41:35\", 1004, [[\"page0\", \"2023...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>user1</td>\n","      <td>[\"2023-05-26 05:31:50\", 984, [[\"page0\", \"2023-...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>5278</th>\n","      <td>user998</td>\n","      <td>[\"2023-05-26 17:33:49\", 631, [[\"page0\", \"2023-...</td>\n","    </tr>\n","    <tr>\n","      <th>5279</th>\n","      <td>user998</td>\n","      <td>[\"2023-05-15 23:21:39\", 1393, [[\"page0\", \"2023...</td>\n","    </tr>\n","    <tr>\n","      <th>5280</th>\n","      <td>user998</td>\n","      <td>[\"2023-05-16 10:15:48\", 1448, [[\"page0\", \"2023...</td>\n","    </tr>\n","    <tr>\n","      <th>5281</th>\n","      <td>user998</td>\n","      <td>[\"2023-05-26 17:06:25\", 810, [[\"page0\", \"2023-...</td>\n","    </tr>\n","    <tr>\n","      <th>5282</th>\n","      <td>user999</td>\n","      <td>[\"2023-05-20 08:08:50\", 744, [[\"page0\", \"2023-...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5283 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-77fdcc6c-51e4-45fe-9625-b2abe059070a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-77fdcc6c-51e4-45fe-9625-b2abe059070a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-77fdcc6c-51e4-45fe-9625-b2abe059070a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-08300a27-ef6b-4b5d-9ab6-717b5e1faceb\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-08300a27-ef6b-4b5d-9ab6-717b5e1faceb')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-08300a27-ef6b-4b5d-9ab6-717b5e1faceb button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_44ecdb44-61d6-4cb3-a598-750a124272eb\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_44ecdb44-61d6-4cb3-a598-750a124272eb button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5283,\n  \"fields\": [\n    {\n      \"column\": \"user_id\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          \"user521\",\n          \"user737\",\n          \"user740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"session\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5283,\n        \"samples\": [\n          \"[\\\"2023-05-06 22:16:51\\\", 1296, [[\\\"page0\\\", \\\"2023-05-06 22:25:50\\\"], [\\\"page1\\\", \\\"2023-05-06 22:37:04\\\"], [\\\"page2\\\", \\\"2023-05-06 22:29:50\\\"], [\\\"page3\\\", \\\"2023-05-06 22:26:00\\\"], [\\\"page4\\\", \\\"2023-05-06 22:24:16\\\"], [\\\"page5\\\", \\\"2023-05-06 22:37:49\\\"], [\\\"page6\\\", \\\"2023-05-06 22:23:45\\\"], [\\\"page7\\\", \\\"2023-05-06 22:36:13\\\"], [\\\"page8\\\", \\\"2023-05-06 22:26:03\\\"], [\\\"page9\\\", \\\"2023-05-06 22:24:01\\\"], [\\\"page10\\\", \\\"2023-05-06 22:35:25\\\"], [\\\"page11\\\", \\\"2023-05-06 22:36:45\\\"], [\\\"page12\\\", \\\"2023-05-06 22:18:43\\\"], [\\\"page13\\\", \\\"2023-05-06 22:28:13\\\"], [\\\"page14\\\", \\\"2023-05-06 22:38:04\\\"]]]\",\n          \"[\\\"2023-05-28 23:49:26\\\", 517, [[\\\"page0\\\", \\\"2023-05-28 23:50:20\\\"], [\\\"page1\\\", \\\"2023-05-28 23:53:26\\\"], [\\\"page2\\\", \\\"2023-05-28 23:54:56\\\"], [\\\"page3\\\", \\\"2023-05-28 23:57:24\\\"], [\\\"page4\\\", \\\"2023-05-28 23:55:40\\\"], [\\\"page5\\\", \\\"2023-05-28 23:56:58\\\"], [\\\"page6\\\", \\\"2023-05-28 23:56:57\\\"], [\\\"page7\\\", \\\"2023-05-28 23:53:49\\\"], [\\\"page8\\\", \\\"2023-05-28 23:53:56\\\"]]]\",\n          \"[\\\"2023-05-22 08:23:34\\\", 1050, [[\\\"page0\\\", \\\"2023-05-22 08:35:22\\\"], [\\\"page1\\\", \\\"2023-05-22 08:24:34\\\"], [\\\"page2\\\", \\\"2023-05-22 08:32:56\\\"], [\\\"page3\\\", \\\"2023-05-22 08:38:57\\\"]]]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","source":["### **Решения**"],"metadata":{"id":"CxmnD3GvffQ4"}},{"cell_type":"markdown","source":["#### **Задача 1**\n","\n","Ваша задача написать функцию `get_time_to_conversion`, которая принимает на вход сессии в формате, который вы определили для себя и подсчитывает среднее время между заходом на сайт и целевым действием.\n","\n","Результат - число типа `float`, округленное до двух знаков после запятой, сохраните в переменную `res`"],"metadata":{"id":"5bdLXu2ksLB7"}},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"qUL4LtIUnJge"}},{"cell_type":"code","source":["import json\n","import csv\n","from datetime import datetime\n","\n","file = 'sessions.csv'\n","\n","def date_hook(obj):\n","    for key, value in obj.items():\n","        if isinstance(value, str):\n","            try:\n","                obj[key] = datetime.fromisoformat(value)\n","            except ValueError:\n","                pass\n","    return obj\n","\n","def parse_json(file):\n","  parsed_data = []\n","  with open(file, newline='') as f:\n","    reader = csv.DictReader(f, delimiter=',')\n","    for row in reader:\n","      json_obj = json.loads(row['session'], object_hook=date_hook)\n","      parsed_data.append([row['user_id'], json_obj])\n","\n","\n","  return parsed_data\n","\n","result = parse_json(file)\n","\n","def get_time_to_conversion(result):\n","  session_durations = []\n","  for i in range(len(result)):\n","    for k in result[i][1][2]:\n","      if k[0] == 'conversion':\n","        start_date = datetime.strptime(result[i][1][0], '%Y-%m-%d %H:%M:%S')\n","        conversion_date = datetime.strptime(k[1], '%Y-%m-%d %H:%M:%S')\n","        session_duration = (conversion_date - start_date).total_seconds()\n","        session_durations.append(session_duration)\n","\n","  return round(sum(session_durations) / len(session_durations), 2)\n","\n","res = get_time_to_conversion(result)\n","print(res)"],"metadata":{"id":"Ia39hhmZbNRW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748421382295,"user_tz":-240,"elapsed":123,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"5c1ac2ea-6b61-42e9-9059-62756f025eb1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["467.24\n"]}]},{"cell_type":"markdown","source":["✏️ ✏️ ✏️\n","\n","**Проверка**\n","\n","Чтобы проверить свое решение, запустите код в следующих ячейках"],"metadata":{"id":"54Tvpn9OkDwV"}},{"cell_type":"code","source":["try:\n","    assert res == 467.24\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"id":"LkqzVw9skKEC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748421369104,"user_tz":-240,"elapsed":12,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"28b510cf-ccc5-47d2-e398-7b15999b6133"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]},{"cell_type":"markdown","source":["#### **Задача 2**\n","\n","Ваша задача написать функцию `get_session_duration`, которая принимает на вход сессии в формате, который вы определили для себя и подсчитывает сколько вообще в среднем длится сессия.\n","\n","Результат - число типа `float`, округленное до двух знаков после запятой, сохраните в переменную `res2`"],"metadata":{"id":"QLNMvvhXoIdV"}},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"LThhpSINoMHN"}},{"cell_type":"code","source":["import json\n","import csv\n","from datetime import datetime\n","\n","file = 'sessions.csv'\n","\n","def parse_json(file):\n","  parsed_data = []\n","  with open(file, newline='') as f:\n","    reader = csv.DictReader(f, delimiter=',')\n","    for row in reader:\n","      json_obj = json.loads(row['session'], object_hook=date_hook)\n","      parsed_data.append([row['user_id'], json_obj])\n","\n","  return parsed_data\n","\n","result = parse_json(file)\n","\n","def get_session_duration(result):\n","  session_durations = []\n","  for i in range(len(result)):\n","    duration_time = result[i][1][1]\n","    session_durations.append(duration_time)\n","\n","  return round(sum(session_durations) / len(session_durations), 2)\n","\n","res2 = get_session_duration(result)\n","print(res2)\n"],"metadata":{"id":"9s8JBMlboJuf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748422766077,"user_tz":-240,"elapsed":346,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"706a9a8d-dfb8-4c9d-a4cd-41575b17fa6f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["901.35\n"]}]},{"cell_type":"markdown","source":["✏️ ✏️ ✏️\n","\n","**Проверка**\n","\n","Чтобы проверить свое решение, запустите код в следующих ячейках"],"metadata":{"id":"GN_PNZICsxRD"}},{"cell_type":"code","source":["try:\n","    assert res2 == 901.35\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"id":"tys9eJRSqcEW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748422772205,"user_tz":-240,"elapsed":5,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"b2dcca7f-eec4-49cc-b451-15a6cd0ba3f9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]},{"cell_type":"markdown","source":["#### **Задача 3**\n","\n","Напишите функцию `get_daily_session_count`, которая принимает на вход сессии в формате, который вы определили для себя и подсчитывает cколько разных заходов в течение дня делает пользователь.\n","\n","Результат - число типа `float`, округленное до двух знаков после запятой, сохраните в переменную `res3`"],"metadata":{"id":"AwB-HtPLtjyl"}},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"GOTB--hmt2xw"}},{"cell_type":"code","source":["\n","import json\n","import csv\n","from datetime import datetime\n","from collections import defaultdict\n","\n","file = 'sessions.csv'\n","\n","def parse_json(file):\n","  parsed_data = []\n","  with open(file, newline='') as f:\n","    reader = csv.DictReader(f, delimiter=',')\n","    for row in reader:\n","      json_obj = json.loads(row['session'], object_hook=date_hook)\n","      parsed_data.append([row['user_id'], json_obj])\n","\n","  return parsed_data\n","\n","result = parse_json(file)\n","\n","def get_daily_session_count(result):\n","  daily_stats = defaultdict(lambda: {'total_sessions': 0, 'unique_users': set()})\n","  for user_id, session in result:\n","    start_time_str = session[0]\n","    start_date = datetime.strptime(start_time_str, '%Y-%m-%d %H:%M:%S').date()\n","    daily_stats[start_date]['total_sessions'] += 1\n","    daily_stats[start_date]['unique_users'].add(user_id)\n","\n","  daily_ratios = {}\n","  for date, stats in daily_stats.items():\n","    total_sessions = stats['total_sessions']\n","    unique_users_count = len(stats['unique_users'])\n","    if unique_users_count > 0:\n","      daily_ratios[date] = total_sessions / unique_users_count\n","    else:\n","      daily_ratios[date] = 0\n","  if daily_ratios:\n","    average_ratio_across_days = sum(daily_ratios.values()) / len(daily_ratios)\n","    return round(average_ratio_across_days, 2)\n","  else:\n","    return 0.0 # Return 0 if there are no days with data\n","\n","res3 = get_daily_session_count(result)\n","print(res3)"],"metadata":{"id":"fz7nRb_ntKMv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748428800691,"user_tz":-240,"elapsed":61,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"990758a5-c263-4097-df81-cc11a78db13f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1.11\n"]}]},{"cell_type":"markdown","source":["✏️ ✏️ ✏️\n","\n","**Проверка**\n","\n","Чтобы проверить свое решение, запустите код в следующих ячейках"],"metadata":{"id":"0-7TiI06t8D0"}},{"cell_type":"code","source":["try:\n","    assert res3 == 1.11\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"id":"eOzvKzYqt_UH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748428804577,"user_tz":-240,"elapsed":7,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"3098f0e3-9db6-4aaf-eee6-e415ca9b9f0f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]},{"cell_type":"markdown","source":["#### **Задача 4**\n","\n","Напишите функцию `get_average_session_count`, которая принимает на вход сессии в формате, который вы определили для себя и подсчитывает сколько заходов вообще в среднем делает пользователь.\n","\n","Результат - число типа `float`, округленное до двух знаков после запятой, сохраните в переменную `res4`"],"metadata":{"id":"R9huPDD3i9wz"}},{"cell_type":"markdown","source":["**Решение**\n","\n","Напишите свое решение ниже"],"metadata":{"id":"1CWLkmQzjLNf"}},{"cell_type":"code","source":["\n","import json\n","import csv\n","from datetime import datetime\n","from collections import defaultdict\n","\n","file = 'sessions.csv'\n","\n","def parse_json(file):\n","  parsed_data = []\n","  with open(file, newline='') as f:\n","    reader = csv.DictReader(f, delimiter=',')\n","    for row in reader:\n","      json_obj = json.loads(row['session'], object_hook=date_hook)\n","      parsed_data.append([row['user_id'], json_obj])\n","\n","  return parsed_data\n","\n","result = parse_json(file)\n","\n","def get_average_session_count(result):\n","  sessions = defaultdict(int)\n","  for user_id, session in result:\n","    sessions[user_id] += 1\n","\n","  return round(sum(sessions.values()) / len(sessions), 2)\n","\n","res4 = get_average_session_count(result)\n","print(res4)"],"metadata":{"id":"MaWSJGvEjJgq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748427254172,"user_tz":-240,"elapsed":437,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"81b26cfe-0654-42c4-f48b-8a61db5d40ba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5.28\n"]}]},{"cell_type":"markdown","source":["✏️ ✏️ ✏️\n","\n","**Проверка**\n","\n","Чтобы проверить свое решение, запустите код в следующих ячейках"],"metadata":{"id":"nLNPyebujSh8"}},{"cell_type":"code","source":["try:\n","    assert res4 == 5.28\n","except AssertionError:\n","    print('Ответы не совпадают')\n","else:\n","    print('Поздравляем, Вы справились!')"],"metadata":{"id":"oPvNP5sijS9v","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748427257722,"user_tz":-240,"elapsed":10,"user":{"displayName":"Tatiana Agafonova","userId":"13592500017738086408"}},"outputId":"31fc95a2-7417-4293-a80f-95be7ad1c002"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Поздравляем, Вы справились!\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"ExXew_jhja_m"},"execution_count":null,"outputs":[]}]}